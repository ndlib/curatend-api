=begin
#CurateND Query API

#Prototype of the CurateND Query API. This is a work in progress. 

OpenAPI spec version: 0.0.0
Contact: curate@nd.edu
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get Object Info
    # 
    # @param id The opaque identifier (e.g Noid) of the object to retrieve
    # @param [Hash] opts the optional parameters
    # @return [ObjectInfo]
    def objects_id_get(id, opts = {})
      data, _status_code, _headers = objects_id_get_with_http_info(id, opts)
      return data
    end

    # Get Object Info
    # 
    # @param id The opaque identifier (e.g Noid) of the object to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(ObjectInfo, Fixnum, Hash)>] ObjectInfo data, response status code and response headers
    def objects_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.objects_id_get ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.objects_id_get" if id.nil?
      # resource path
      local_var_path = "/objects/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ObjectInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#objects_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform a search and return results. Pagination is accomplished using an offset/size scheme.
    # 
    # @param q Custom query string for filtering results
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Pagination offset (default to 0)
    # @option opts [Integer] :n Request this many (default to 20)
    # @return [ObjectsQueryResult]
    def search_get(q, opts = {})
      data, _status_code, _headers = search_get_with_http_info(q, opts)
      return data
    end

    # Perform a search and return results. Pagination is accomplished using an offset/size scheme.
    # 
    # @param q Custom query string for filtering results
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Pagination offset
    # @option opts [Integer] :n Request this many
    # @return [Array<(ObjectsQueryResult, Fixnum, Hash)>] ObjectsQueryResult data, response status code and response headers
    def search_get_with_http_info(q, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.search_get ..."
      end
      # verify the required parameter 'q' is set
      fail ArgumentError, "Missing the required parameter 'q' when calling DefaultApi.search_get" if q.nil?
      if opts[:'n'] > 100.0
        fail ArgumentError, 'invalid value for "opts[:"n"]" when calling DefaultApi.search_get, must be smaller than or equal to 100.0.'
      end

      # resource path
      local_var_path = "/search".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'q'] = q
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'n'] = opts[:'n'] if !opts[:'n'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ObjectsQueryResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#search_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
